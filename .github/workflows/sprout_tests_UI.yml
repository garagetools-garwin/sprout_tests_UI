name: sprout_tests_UI

# Определение события, запускающего workflow
on: 
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 5 * * *'    
    - cron: '0 14 * * *'

# Определение Задачи(job)
jobs:
  # Основная часть тестов
  tests:
    timeout-minutes: 60

    # запуск на виртуальной машине
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && (github.event.schedule == '0 5 * * *' || github.event.schedule == '0 14 * * *'))
    runs-on: ubuntu-latest
    env:
      ADMIN_BUYER_EMAIL: ${{ secrets.ADMIN_BUYER_EMAIL }}
      ADMIN_BUYER_PASSWORD: ${{ secrets.ADMIN_BUYER_PASSWORD }}

    steps:

      # Клонирование репозитория
      - uses: actions/checkout@v4

      # Установка Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.1'

      # Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Установка браузеров
      - name: Ensure browsers are installed
        run: python -m playwright install --with-deps

      # Запуск тестов
      - name: Run tests
        run: |
          pytest --headed --reruns 2 --reruns-delay 3 --alluredir=allure-results
          
      # Проверка наличия json-файлов в allure-results (чтобы не запушить сломаный отчет)
      - name: Check if Allure results exist
        id: check_allure
        run: |
          if [ -d allure-results ] && [ "$(ls -A allure-results/*.json 2>/dev/null)" ]; then
            echo "allure_results_exist=true" >> $GITHUB_OUTPUT
          else
            echo "allure_results_exist=false" >> $GITHUB_OUTPUT
          fi

      # Загрузка артефактов
      - name: Upload Allure Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-main-${{ github.run_id }}
          path: allure-results/
          # retention_days: 10

      # Получение истории прогонов Allure
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Генерация отчета с учетом истории прогонов
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        if: steps.check_allure.outputs.allure_results_exist == 'true'
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      # Публикация отчета Allure  
      - name: Publish Allure report
        uses: peaceiris/actions-gh-pages@v2
        if: steps.check_allure.outputs.allure_results_exist == 'true'
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history
